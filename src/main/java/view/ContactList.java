//Application development in popular integrated development environments Â© 2023 by Myrsini Stasinou is licensed under CC BY 4.0
package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import controller.ContactsController;
import model.ContactModel;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

public class ContactList extends JFrame {
    private JPanel ContactListPanel;
    private JButton addContactButton;
    private JTable contactsTable;
    private JButton exportDataButton;
    private JScrollPane tableScrollPane;
    private JButton exitButton;

    private final ContactsController contactsController;

    public ContactList(final ContactsController contactsController) {

        setContentPane(ContactListPanel);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
        setSize(700, 600);

        this.contactsController = contactsController;

        //load data from db
        this.loadDataToView();

        addContactButton.addActionListener(e -> {
            //open next form (Add Contact)
            openNextForm();
        });
        exportDataButton.addActionListener(e -> {
            final Optional<File> userDefinedFile = getUserDefinedFile();
            if (userDefinedFile.isEmpty()) {
                return;
            }
            //export all data from db to txt file
            writeDataOnFile(userDefinedFile.get());
        });
        exitButton.addActionListener(e -> {
            System.exit(0);
        });
    }

    private void writeDataOnFile(File file) {
        try {
            this.contactsController.exportToFile(file);
            //Show a pop-up (success msg)
            JOptionPane.showMessageDialog(this, "Your file was saved", "Message", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private Optional<File> getUserDefinedFile() {
        // open window dialog so that user will choose where to save the file
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false); //shows only files of .txt
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text File", "txt", "text"));
        int response = fileChooser.showSaveDialog(null);

        if (response != JFileChooser.APPROVE_OPTION) {
            return Optional.empty();
        }

        final File file = new File(fileChooser.getSelectedFile().getAbsolutePath() + ".txt");

        if (file.exists()) {
            boolean fileIsDeletedSuccessfully = file.delete();
            if (!(fileIsDeletedSuccessfully)) {
                return Optional.empty();
            }
        }

        try {
            final boolean fileIsCreatedSuccessfully = file.createNewFile();
            if (fileIsCreatedSuccessfully) {
                return Optional.of(file);
            }
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }

        return Optional.empty();
    }

    private void loadDataToView() {
        List<ContactModel> contacts = this.contactsController.getAll();

        String[] dataOfRow = new String[]{
                "ID", "Name", "Surname", "Date Of Birth", "Phone Number", "Email", "Address", "City", "Notes"
        };

        DefaultTableModel model = (DefaultTableModel) contactsTable.getModel();
        model.setColumnIdentifiers(dataOfRow);

        for (ContactModel contact : contacts) {
            Object[] row = new Object[]{
                    contact.getId(),
                    contact.getName(),
                    contact.getSurname(),
                    contact.getDateOfBirth(),
                    contact.getPhoneNumber(),
                    contact.getEmail(),
                    contact.getAddress(),
                    contact.getCity(),
                    contact.getNotes()
            };
            model.addRow(row);
        }

    }

    private void openNextForm() {
        new AddContact(contactsController);
        this.setVisible(false);
        this.dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ContactListPanel = new JPanel();
        ContactListPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        addContactButton = new JButton();
        addContactButton.setText("Add Contact");
        ContactListPanel.add(addContactButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        ContactListPanel.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        exportDataButton = new JButton();
        exportDataButton.setText("Export Data");
        ContactListPanel.add(exportDataButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tableScrollPane = new JScrollPane();
        tableScrollPane.setHorizontalScrollBarPolicy(31);
        ContactListPanel.add(tableScrollPane, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        contactsTable = new JTable();
        tableScrollPane.setViewportView(contactsTable);
        exitButton = new JButton();
        exitButton.setText("Exit");
        ContactListPanel.add(exitButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ContactListPanel;
    }

}
